# Binary

A computer needs a way to store information, and there are lots of ways to store information.
Early computing machines would for example rotate a gear a certain number of teeth to store a
number.
Think of a mechanical clock for example, the information about the current time is stored quite
effectively using the angle of gears.
If we take just the second hand, we can store 60 unique positions or 60 different _states_ the
second hand can be in. Combine with 60 positions of the minute hand and 12 of the hour hand, the
total number of states a clock can represent is `60 * 60 * 12` or 43200. Hopefully this makes sense
as the number of seconds in 12 hours is 43200.

Other machines would store information using varying voltages of electricity. AM Radio still
transmits and interprets sound information using varying levels of voltage (the difference between
the number of electrons on one side of a electric circuit vs another).
It was discovered early on in the history of electro-mechanical computers that it was much more
practical to build machines that store information using electrical current (the rate of electrons
flowing through a wire).
More specifically, folks understood that we really only need a way to check if electrons are
flowing (a circuit is _ON_) as opposed to no electrons flowing (a circuit is _OFF_).

So given just two states, OFF and ON, how can we scale this up to store more information like we
can by adding teeth to a gear? Well, we already do this with a clock. We can add more states by
adding more gears. In a computer we add more wires.

::: note
Nothing says that the state of these wires _have_ to represent numbers.
A single wire could represent OFF and ON, 0 or 1, weekday or weekend, and 111 or 912.
Its completely arbitrary.
We just all have to agree on what it means in context of what we're using the information for.
The Romans for example used letters to represent numbers _or_ words depending on the context.
:::

If we start with one wire we can store 2 states. If we add another wire we can use the math that
we used in the clock example above, just multiply the number of states. `2 * 2` is four states.
Keep adding more and more wires and we can store anything. You can represent this more easily
using _exponential notation_ where `2 * 2` is written as 2^2^, and read as
"two to the _second power_". Add another wire again and we have 2^3^ or 8 states.

Let's pause here and look at our own system of writing numbers.
We have the _digits_ 0 through 9 and each digit has 10 possible states.
We call this written system a _base 10_ or _decimal_ number system.
To represent more states (more numbers) we either need more unique digits or start repeating them
like we do with the gears of a clock or wires in our examples above.
We can use the same math above and compute the possible representable states given any number of
digits.
For example, 10^2^ is 100 or in other words, the number of unique states you can represent with two
decimal digits is 100. If you start at zero and look at all numbers up to and including 99 you'll
have seen 100 different numbers.


